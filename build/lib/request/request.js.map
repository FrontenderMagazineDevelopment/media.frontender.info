{"version":3,"sources":["../../../source/lib/request/request.js"],"names":["TMMicroServiceAPI","url","userOptions","undefined","ErrorBadRequest","messages","badRequest","updatedUrl","replace","version","headers","Accept","token","Authorization","defaultOptions","method","data","options","encodedData","stringify","length"],"mappings":"+xBAAA,iD,+DACA,oC,kqBAEqBA,kB,gIAWnB;;;;;;;;;;sGAWcC,G,CAAKC,W,gLACbD,MAAQE,S,8BACJ,IAAIC,gBAAJ,CAAoB,GAApB,CAAyBJ,kBAAkBK,QAAlB,CAA2BC,UAApD,C,QAEFC,U,CAAaN,IAAIO,OAAJ,CAAY,6BAAZ,KAA8C,KAAKC,OAAnD,C,CACfC,O,CAAU,CACZ,eAAgB,kBADJ,CAEZC,OAAQ,kBAFI,C,CAId,GAAI,KAAKC,KAAL,GAAe,IAAnB,CAAyB,CACvBF,oBACKA,OADL,EAEEG,cAAe,KAAKD,KAFtB,EAID,CACKE,c,CAAiB,CACrBC,OAAQ,KADa,CAErBL,eAFqB,CAGrBM,KAAM,EAHe,C,CAKjBC,O,aAAeH,c,CAAmBZ,W,EACxCe,QAAQP,OAAR,aAAuBA,OAAvB,CAAmCO,QAAQP,OAA3C,EACMQ,W,CAAc,oBAAUC,SAAV,CAAoBF,QAAQD,IAA5B,C,iCACb,8BAAME,YAAYE,MAAZ,GAAuB,CAAvB,CAA2Bb,UAA3B,CAA2CA,UAA3C,KAAyDW,WAA/D,CAA8ED,OAA9E,C,4IA5CT;;;qCADmBjB,iB,CAKZK,Q,CAAW,CAChBJ,IAAK,0BADW,CAEhBQ,QAAS,sBAFO,CAGhBH,WAAY,aAHI,C,iBALCN,iB","file":"request.js","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport urlencode from 'urlencode';\n\nexport default class TMMicroServiceAPI {\n  /**\n   * Object with class service messages\n   * @type {Object}\n   */\n  static messages = {\n    url: 'Wrong Service URL Format',\n    version: 'Wrong Version Format',\n    badRequest: 'Bad Request',\n  };\n\n  /**\n  * Fetch remote resource\n  *\n  * @method request\n  * @memberof TMMicroServiceAPI\n  *\n  * @static\n  * @param {string} url - resource url\n  * @param {Object} userOptions - user defined options\n  * @return {Promise} - Promise with server {@link https://developer.mozilla.org/docs/Web/API/Response|Response}\n  */\n  async request(url, userOptions) {\n    if (url === undefined) {\n      throw new ErrorBadRequest(400, TMMicroServiceAPI.messages.badRequest);\n    }\n    const updatedUrl = url.replace(/\\/v[\\d]+(.[\\d]+)?(.[\\d]+)?/i,`/${this.version}`);\n    let headers = {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    };\n    if (this.token !== null) {\n      headers = {\n        ...headers,\n        Authorization: this.token,\n      };\n    }\n    const defaultOptions = {\n      method: 'GET',\n      headers,\n      data: {},\n    };\n    const options = { ...defaultOptions, ...userOptions };\n    options.headers = { ...headers, ...options.headers };\n    const encodedData = urlencode.stringify(options.data);\n    return fetch(encodedData.length === 0 ? updatedUrl : `${updatedUrl}?${encodedData}`, options);\n  }\n}\n"]}