{"version":3,"sources":["../../../source/lib/twitter/twitter.js"],"names":["request","require","qs","Twitter","config","consumer_key","process","env","TWITTER_CUSTOMER_KEY","consumer_key_secret","TWITTER_CUSTOMER_KEY_SECRET","access_tocken","TWITTER_TOKEN","access_tocken_secret","TWITTER_TOKEN_SECRET","oauth","consumer","key","secret","signature_method","hash_function","baseString","createHmac","update","digest","token","urls","api","search_users","tweet","status","request_data","url","method","data","options","headers","toHeader","authorize","body","encodeURIComponent","response","ok","json","Error","statusText","keywordsList","keywords","Array","isArray","promises","map","keyword","searchForUser","Promise","all","users","user","name","screen_name","entities","profile_image_url","Object","values","entitie","uri","expanded_url","reduce","a","b","concat","login"],"mappings":"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","file":"twitter.js","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport crypto from 'crypto';\nimport OAuth from 'oauth-1.0a';\nimport urlencode from 'urlencode';\nimport FormData from 'formdata';\nconst request = require('request');\nconst qs = require('qs');\n\n/**\n * @class Twitter â€” set of methods to work with twitter api using promises\n */\nexport default class Twitter {\n  /**\n     * @constructor\n     */\n  constructor() {\n\n    this.config = {\n      consumer_key: process.env.TWITTER_CUSTOMER_KEY,\n      consumer_key_secret: process.env.TWITTER_CUSTOMER_KEY_SECRET,\n      access_tocken: process.env.TWITTER_TOKEN,\n      access_tocken_secret: process.env.TWITTER_TOKEN_SECRET,\n    };\n\n    this.oauth = OAuth({\n      consumer: {\n        key: this.config.consumer_key,\n        secret: this.config.consumer_key_secret,\n      },\n      signature_method: 'HMAC-SHA1',\n      hash_function: (baseString, key) =>\n        crypto\n          .createHmac('sha1', key)\n          .update(baseString)\n          .digest('base64'),\n    });\n\n    this.token = {\n      key: this.config.access_tocken,\n      secret: this.config.access_tocken_secret,\n    };\n\n    this.urls = {\n      api: 'https://api.twitter.com/1.1/',\n      search_users: 'users/search.json?page=1&count=2&q=',\n      tweet: 'statuses/update.json',\n    };\n  }\n\n  /**\n   * Tweet your message\n   * @param  {string} status  - The text of the status update. URL encode as necessary. t.co link wrapping will affect character counts.\n   * @return {Promise}        - promise with tweeting process\n   */\n  async tweet(status) {\n\n    const request_data = {\n      url: this.urls.api + this.urls.tweet,\n      method: 'POST',\n      data: { status },\n    };\n\n    const options = {\n      url: request_data.url,\n      method: request_data.method,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Accept': 'application/json',\n        ...this.oauth.toHeader(this.oauth.authorize(request_data, this.token)),\n      },\n      body: encodeURIComponent('status') + '=' + encodeURIComponent(status),\n    };\n\n    const response = await fetch(request_data.url, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n\n    throw new Error(`${response.status} ${response.statusText}`);\n  }\n\n  /**\n   * Search for users\n   * @param {Array} keywords\n   * @return {Promise}\n   */\n  searchForUsers(keywordsList) {\n    const keywords = (!Array.isArray(keywordsList) && typeof keywordsList === 'string') ? new Array(keywordsList) : keywordsList;\n    const promises = keywords.map((keyword)=> this.searchForUser(keyword));\n    return Promise.all(promises);\n  }\n\n  /**\n     * Search for user\n     * @param {String} keyword\n     * @return {Promise}\n     */\n  async searchForUser(keyword) {\n    const url = this.urls.api + this.urls.search_users + encodeURIComponent(keyword);\n    const options = {\n      headers: this.oauth.toHeader(this.oauth.authorize({ url, method: 'GET' }, this.token)),\n      json: true,\n    };\n    const response = await fetch(url, options);\n    if (response.ok) {\n      const json = await response.json();\n      const users = json.map((user)=>{\n        const { name, screen_name, entities, profile_image_url } = user;\n        const urls = Object.values(entities).map((entitie)=> entitie.urls.map((uri)=>uri.expanded_url)).reduce((a, b)=>a.concat(b));\n        return {\n          name,\n          login: screen_name,\n          urls,\n          profile_image_url,\n        };\n      });\n      return users;\n    }\n    throw new Error(`${response.status} ${response.statusText}`);\n  }\n}\n"]}