{"version":3,"sources":["../../../source/lib/facebook/facebook.js"],"names":["request","require","qs","Facebook","config","consumer_key","process","env","TWITTER_CUSTOMER_KEY","consumer_key_secret","TWITTER_CUSTOMER_KEY_SECRET","access_tocken","TWITTER_TOKEN","access_tocken_secret","TWITTER_TOKEN_SECRET","oauth","consumer","key","secret","signature_method","hash_function","baseString","createHmac","update","digest","token","urls","api","publish","message","request_data","url","method","data","options","headers","toHeader","authorize","body","encodeURIComponent","response","ok","json","Error","status","statusText"],"mappings":"+xBAAA,iD,+DACA,8B,6CACA,iC,2CACA,oC,mDACA,kC,6pBACA,GAAMA,SAAUC,QAAQ,SAAR,CAAhB,CACA,GAAMC,IAAKD,QAAQ,IAAR,CAAX,CAEA;AACA;AAEA;;MAGqBE,S,YACnB;;OAGA,mBAAc,gCAEZ,KAAKC,MAAL,CAAc,CACZC,aAAcC,QAAQC,GAAR,CAAYC,oBADd,CAEZC,oBAAqBH,QAAQC,GAAR,CAAYG,2BAFrB,CAGZC,cAAeL,QAAQC,GAAR,CAAYK,aAHf,CAIZC,qBAAsBP,QAAQC,GAAR,CAAYO,oBAJtB,CAAd,CAOA,KAAKC,KAAL,CAAa,oBAAM,CACjBC,SAAU,CACRC,IAAK,KAAKb,MAAL,CAAYC,YADT,CAERa,OAAQ,KAAKd,MAAL,CAAYK,mBAFZ,CADO,CAKjBU,iBAAkB,WALD,CAMjBC,cAAe,uBAACC,UAAD,CAAaJ,GAAb,QACb,kBACGK,UADH,CACc,MADd,CACsBL,GADtB,EAEGM,MAFH,CAEUF,UAFV,EAGGG,MAHH,CAGU,QAHV,CADa,CANE,CAAN,CAAb,CAaA,KAAKC,KAAL,CAAa,CACXR,IAAK,KAAKb,MAAL,CAAYO,aADN,CAEXO,OAAQ,KAAKd,MAAL,CAAYS,oBAFT,CAAb,CAKA,KAAKa,IAAL,CAAY,CACVC,IAAK,mCADK,CAEVC,QAAS,cAFC,CAIb,CAED;;;;6IAKcC,O,wJAENC,Y,CAAe,CACnBC,IAAK,KAAKL,IAAL,CAAUC,GAAV,CAAgB,KAAKD,IAAL,CAAUE,OADZ,CAEnBI,OAAQ,MAFW,CAGnBC,KAAM,CAAEJ,eAAF,CAHa,C,CAMfK,O,CAAU,CACdH,IAAKD,aAAaC,GADJ,CAEdC,OAAQF,aAAaE,MAFP,CAGdG,kBACE,eAAgB,mCADlB,CAEE,SAAU,kBAFZ,EAGK,KAAKpB,KAAL,CAAWqB,QAAX,CAAoB,KAAKrB,KAAL,CAAWsB,SAAX,CAAqBP,YAArB,CAAmC,KAAKL,KAAxC,CAApB,CAHL,CAHc,CAQda,KAAMC,mBAAmB,SAAnB,EAAgC,GAAhC,CAAsCA,mBAAmBV,OAAnB,CAR9B,C,uBAWO,8BAAMC,aAAaC,GAAnB,CAAwBG,OAAxB,C,QAAjBM,Q,mBAEFA,SAASC,E,+CACQD,UAASE,IAAT,E,QAAbA,I,+CACCA,I,eAGH,IAAIC,MAAJ,CAAaH,SAASI,MAAtB,KAAgCJ,SAASK,UAAzC,C,8KApEW1C,Q","file":"facebook.js","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport crypto from 'crypto';\nimport OAuth from 'oauth-1.0a';\nimport urlencode from 'urlencode';\nimport FormData from 'formdata';\nconst request = require('request');\nconst qs = require('qs');\n\n//api token\n//oauth/access_token?client_id=302140436578036&client_secret=bccb07ea4329d9bd9171fd5ee98b31d7&grant_type=client_credentials\n\n/**\n * @class Twitter â€” set of methods to work with twitter api using promises\n */\nexport default class Facebook {\n  /**\n     * @constructor\n     */\n  constructor() {\n\n    this.config = {\n      consumer_key: process.env.TWITTER_CUSTOMER_KEY,\n      consumer_key_secret: process.env.TWITTER_CUSTOMER_KEY_SECRET,\n      access_tocken: process.env.TWITTER_TOKEN,\n      access_tocken_secret: process.env.TWITTER_TOKEN_SECRET,\n    };\n\n    this.oauth = OAuth({\n      consumer: {\n        key: this.config.consumer_key,\n        secret: this.config.consumer_key_secret,\n      },\n      signature_method: 'HMAC-SHA1',\n      hash_function: (baseString, key) =>\n        crypto\n          .createHmac('sha1', key)\n          .update(baseString)\n          .digest('base64'),\n    });\n\n    this.token = {\n      key: this.config.access_tocken,\n      secret: this.config.access_tocken_secret,\n    };\n\n    this.urls = {\n      api: 'https://graph.facebook.com/v2.11/',\n      publish: 'page-id/feed',\n    };\n  }\n\n  /**\n   * Tweet your message\n   * @param  {string} status  - The text of the status update. URL encode as necessary. t.co link wrapping will affect character counts.\n   * @return {Promise}        - promise with tweeting process\n   */\n  async publish(message) {\n\n    const request_data = {\n      url: this.urls.api + this.urls.publish,\n      method: 'POST',\n      data: { message },\n    };\n\n    const options = {\n      url: request_data.url,\n      method: request_data.method,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Accept': 'application/json',\n        ...this.oauth.toHeader(this.oauth.authorize(request_data, this.token)),\n      },\n      body: encodeURIComponent('message') + '=' + encodeURIComponent(message),\n    };\n\n    const response = await fetch(request_data.url, options);\n\n    if (response.ok) {\n      const json = await response.json();\n      return json;\n    }\n\n    throw new Error(`${response.status} ${response.statusText}`);\n  }\n\n}\n"]}